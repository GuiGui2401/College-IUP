{"ast":null,"code":"/**\n * Utilitaire de logging pour contr√¥ler les messages de debug et d'erreur\n */const isDevelopment=process.env.NODE_ENV==='development';// Configuration des niveaux de log\nconst LOG_LEVELS={ERROR:0,WARN:1,INFO:2,DEBUG:3};// Niveau de log actuel (peut √™tre chang√© dynamiquement)\nlet currentLogLevel=isDevelopment?LOG_LEVELS.DEBUG:LOG_LEVELS.ERROR;// Messages d'erreur fr√©quents √† ignorer ou r√©duire\nconst IGNORED_ERROR_PATTERNS=['fetch',// Erreurs de r√©seau fetch\n'CORS',// Erreurs CORS\n'net::ERR_FAILED',// Erreurs de r√©seau g√©n√©riques\n'Response to preflight request doesn\\'t pass access control check','No \\'Access-Control-Allow-Origin\\' header is present'];const NETWORK_ERROR_MESSAGES=['Impossible de se connecter au serveur','V√©rifiez votre connexion','Network request failed','fetch'];class Logger{constructor(){this.errorCounts=new Map();this.lastErrorTime=new Map();this.ERROR_THROTTLE_TIME=5000;// 5 secondes entre les m√™mes erreurs\nthis.MAX_SAME_ERROR=3;// Maximum d'erreurs identiques √† afficher\n}setLevel(level){currentLogLevel=level;}shouldIgnoreError(error){const errorString=error.toString().toLowerCase();return IGNORED_ERROR_PATTERNS.some(pattern=>errorString.includes(pattern.toLowerCase()));}isNetworkError(error){const errorString=error.toString().toLowerCase();return NETWORK_ERROR_MESSAGES.some(pattern=>errorString.includes(pattern.toLowerCase()));}shouldThrottleError(error){const errorKey=error.toString();const now=Date.now();if(!this.errorCounts.has(errorKey)){this.errorCounts.set(errorKey,0);this.lastErrorTime.set(errorKey,now);return false;}const count=this.errorCounts.get(errorKey);const lastTime=this.lastErrorTime.get(errorKey);// Reset counter if enough time has passed\nif(now-lastTime>this.ERROR_THROTTLE_TIME){this.errorCounts.set(errorKey,0);this.lastErrorTime.set(errorKey,now);return false;}// Throttle if we've seen this error too many times\nif(count>=this.MAX_SAME_ERROR){return true;}this.errorCounts.set(errorKey,count+1);return false;}error(message){if(currentLogLevel>=LOG_LEVELS.ERROR){// Check if this is a repeated or ignorable error\nif(this.shouldIgnoreError(message)||this.shouldThrottleError(message)){return;}// For network errors, show a simplified message\nif(this.isNetworkError(message)){console.warn('üîå Probl√®me de connexion r√©seau (les erreurs d√©taill√©es sont masqu√©es)');return;}for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}console.error('‚ùå',message,...args);}}warn(message){if(currentLogLevel>=LOG_LEVELS.WARN){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}console.warn('‚ö†Ô∏è',message,...args);}}info(message){if(currentLogLevel>=LOG_LEVELS.INFO){for(var _len3=arguments.length,args=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){args[_key3-1]=arguments[_key3];}console.info('‚ÑπÔ∏è',message,...args);}}debug(message){if(currentLogLevel>=LOG_LEVELS.DEBUG){for(var _len4=arguments.length,args=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++){args[_key4-1]=arguments[_key4];}console.debug('üêõ',message,...args);}}// M√©thode sp√©ciale pour les erreurs d'API\napiError(error){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(this.isNetworkError(error)){// Ne pas spam la console avec les erreurs de r√©seau\nthis.debug(`Erreur r√©seau ${context}:`,error.message);}else{this.error(`Erreur API ${context}:`,error.message);}}// M√©thode pour configurer le logging en mode production\nsetProductionMode(){var _this=this;currentLogLevel=LOG_LEVELS.WARN;// Override console methods to reduce noise\nconst originalError=console.error;const originalWarn=console.warn;console.error=function(){for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}const message=args.join(' ');if(!_this.shouldIgnoreError(message)){originalError.apply(console,args);}};console.warn=function(){for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}const message=args.join(' ');if(!_this.shouldIgnoreError(message)){originalWarn.apply(console,args);}};}// M√©thode pour configurer le logging en mode silencieux\nsetSilentMode(){var _this2=this;currentLogLevel=LOG_LEVELS.ERROR;// Silence most console outputs\nconst noop=()=>{};console.debug=noop;console.info=noop;// Keep only critical errors\nconst originalError=console.error;console.error=function(){for(var _len7=arguments.length,args=new Array(_len7),_key7=0;_key7<_len7;_key7++){args[_key7]=arguments[_key7];}const message=args.join(' ');if(!_this2.shouldIgnoreError(message)&&!_this2.isNetworkError(message)){originalError.apply(console,args);}};}}// Instance globale\nconst logger=new Logger();// Configuration automatique selon l'environnement\nif(!isDevelopment){logger.setProductionMode();}export default logger;export{LOG_LEVELS};","map":{"version":3,"names":["isDevelopment","process","env","NODE_ENV","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","currentLogLevel","IGNORED_ERROR_PATTERNS","NETWORK_ERROR_MESSAGES","Logger","constructor","errorCounts","Map","lastErrorTime","ERROR_THROTTLE_TIME","MAX_SAME_ERROR","setLevel","level","shouldIgnoreError","error","errorString","toString","toLowerCase","some","pattern","includes","isNetworkError","shouldThrottleError","errorKey","now","Date","has","set","count","get","lastTime","message","console","warn","_len","arguments","length","args","Array","_key","_len2","_key2","info","_len3","_key3","debug","_len4","_key4","apiError","context","undefined","setProductionMode","_this","originalError","originalWarn","_len5","_key5","join","apply","_len6","_key6","setSilentMode","_this2","noop","_len7","_key7","logger"],"sources":["/var/www/College-IUP/front/src/utils/logger.js"],"sourcesContent":["/**\n * Utilitaire de logging pour contr√¥ler les messages de debug et d'erreur\n */\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// Configuration des niveaux de log\nconst LOG_LEVELS = {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    DEBUG: 3\n};\n\n// Niveau de log actuel (peut √™tre chang√© dynamiquement)\nlet currentLogLevel = isDevelopment ? LOG_LEVELS.DEBUG : LOG_LEVELS.ERROR;\n\n// Messages d'erreur fr√©quents √† ignorer ou r√©duire\nconst IGNORED_ERROR_PATTERNS = [\n    'fetch', // Erreurs de r√©seau fetch\n    'CORS', // Erreurs CORS\n    'net::ERR_FAILED', // Erreurs de r√©seau g√©n√©riques\n    'Response to preflight request doesn\\'t pass access control check',\n    'No \\'Access-Control-Allow-Origin\\' header is present'\n];\n\nconst NETWORK_ERROR_MESSAGES = [\n    'Impossible de se connecter au serveur',\n    'V√©rifiez votre connexion',\n    'Network request failed',\n    'fetch'\n];\n\nclass Logger {\n    constructor() {\n        this.errorCounts = new Map();\n        this.lastErrorTime = new Map();\n        this.ERROR_THROTTLE_TIME = 5000; // 5 secondes entre les m√™mes erreurs\n        this.MAX_SAME_ERROR = 3; // Maximum d'erreurs identiques √† afficher\n    }\n\n    setLevel(level) {\n        currentLogLevel = level;\n    }\n\n    shouldIgnoreError(error) {\n        const errorString = error.toString().toLowerCase();\n        return IGNORED_ERROR_PATTERNS.some(pattern => \n            errorString.includes(pattern.toLowerCase())\n        );\n    }\n\n    isNetworkError(error) {\n        const errorString = error.toString().toLowerCase();\n        return NETWORK_ERROR_MESSAGES.some(pattern => \n            errorString.includes(pattern.toLowerCase())\n        );\n    }\n\n    shouldThrottleError(error) {\n        const errorKey = error.toString();\n        const now = Date.now();\n        \n        if (!this.errorCounts.has(errorKey)) {\n            this.errorCounts.set(errorKey, 0);\n            this.lastErrorTime.set(errorKey, now);\n            return false;\n        }\n\n        const count = this.errorCounts.get(errorKey);\n        const lastTime = this.lastErrorTime.get(errorKey);\n\n        // Reset counter if enough time has passed\n        if (now - lastTime > this.ERROR_THROTTLE_TIME) {\n            this.errorCounts.set(errorKey, 0);\n            this.lastErrorTime.set(errorKey, now);\n            return false;\n        }\n\n        // Throttle if we've seen this error too many times\n        if (count >= this.MAX_SAME_ERROR) {\n            return true;\n        }\n\n        this.errorCounts.set(errorKey, count + 1);\n        return false;\n    }\n\n    error(message, ...args) {\n        if (currentLogLevel >= LOG_LEVELS.ERROR) {\n            // Check if this is a repeated or ignorable error\n            if (this.shouldIgnoreError(message) || this.shouldThrottleError(message)) {\n                return;\n            }\n\n            // For network errors, show a simplified message\n            if (this.isNetworkError(message)) {\n                console.warn('üîå Probl√®me de connexion r√©seau (les erreurs d√©taill√©es sont masqu√©es)');\n                return;\n            }\n\n            console.error('‚ùå', message, ...args);\n        }\n    }\n\n    warn(message, ...args) {\n        if (currentLogLevel >= LOG_LEVELS.WARN) {\n            console.warn('‚ö†Ô∏è', message, ...args);\n        }\n    }\n\n    info(message, ...args) {\n        if (currentLogLevel >= LOG_LEVELS.INFO) {\n            console.info('‚ÑπÔ∏è', message, ...args);\n        }\n    }\n\n    debug(message, ...args) {\n        if (currentLogLevel >= LOG_LEVELS.DEBUG) {\n            console.debug('üêõ', message, ...args);\n        }\n    }\n\n    // M√©thode sp√©ciale pour les erreurs d'API\n    apiError(error, context = '') {\n        if (this.isNetworkError(error)) {\n            // Ne pas spam la console avec les erreurs de r√©seau\n            this.debug(`Erreur r√©seau ${context}:`, error.message);\n        } else {\n            this.error(`Erreur API ${context}:`, error.message);\n        }\n    }\n\n    // M√©thode pour configurer le logging en mode production\n    setProductionMode() {\n        currentLogLevel = LOG_LEVELS.WARN;\n        // Override console methods to reduce noise\n        const originalError = console.error;\n        const originalWarn = console.warn;\n        \n        console.error = (...args) => {\n            const message = args.join(' ');\n            if (!this.shouldIgnoreError(message)) {\n                originalError.apply(console, args);\n            }\n        };\n\n        console.warn = (...args) => {\n            const message = args.join(' ');\n            if (!this.shouldIgnoreError(message)) {\n                originalWarn.apply(console, args);\n            }\n        };\n    }\n\n    // M√©thode pour configurer le logging en mode silencieux\n    setSilentMode() {\n        currentLogLevel = LOG_LEVELS.ERROR;\n        \n        // Silence most console outputs\n        const noop = () => {};\n        console.debug = noop;\n        console.info = noop;\n        \n        // Keep only critical errors\n        const originalError = console.error;\n        console.error = (...args) => {\n            const message = args.join(' ');\n            if (!this.shouldIgnoreError(message) && !this.isNetworkError(message)) {\n                originalError.apply(console, args);\n            }\n        };\n    }\n}\n\n// Instance globale\nconst logger = new Logger();\n\n// Configuration automatique selon l'environnement\nif (!isDevelopment) {\n    logger.setProductionMode();\n}\n\nexport default logger;\nexport { LOG_LEVELS };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}