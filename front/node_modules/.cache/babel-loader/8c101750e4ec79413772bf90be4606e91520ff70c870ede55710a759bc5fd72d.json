{"ast":null,"code":"/**\n * Utilitaire pour gérer les erreurs API de manière cohérente\n */import logger from'./logger';/**\n * Extrait le message d'erreur le plus approprié d'une réponse d'erreur\n * @param {Error|Object} error - L'erreur capturée\n * @param {string} defaultMessage - Message par défaut si aucun message spécifique n'est trouvé\n * @returns {string} Le message d'erreur à afficher à l'utilisateur\n */export function extractErrorMessage(error){let defaultMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Une erreur est survenue';logger.apiError(error,'extractErrorMessage');// Si l'erreur a un message direct\nif(error.message){return error.message;}// Si l'erreur provient d'une réponse HTTP avec des données\nif(error.response&&error.response.data){const data=error.response.data;// Message principal\nif(data.message){return data.message;}// Erreurs de validation Laravel\nif(data.errors){const firstErrorKey=Object.keys(data.errors)[0];if(firstErrorKey&&data.errors[firstErrorKey][0]){return data.errors[firstErrorKey][0];}}// Erreur générique\nif(data.error){return data.error;}}// Si c'est un objet d'erreur fetch/axios\nif(error.status||error.statusText){return`Erreur ${error.status||''}: ${error.statusText||'Erreur de réseau'}`;}return defaultMessage;}/**\n * Gère une erreur API et retourne un objet avec le statut et le message\n * @param {Error|Object} error - L'erreur capturée\n * @param {string} defaultMessage - Message par défaut\n * @returns {Object} { success: false, message: string }\n */export function handleApiError(error){let defaultMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Une erreur est survenue';const message=extractErrorMessage(error,defaultMessage);return{success:false,message:message};}/**\n * Wrapper pour les appels API qui gère automatiquement les erreurs\n * @param {Function} apiCall - La fonction d'appel API\n * @param {string} defaultErrorMessage - Message d'erreur par défaut\n * @returns {Promise} Résultat de l'appel API ou erreur formatée\n */export async function safeApiCall(apiCall){let defaultErrorMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Une erreur est survenue';try{const result=await apiCall();return result;}catch(error){return handleApiError(error,defaultErrorMessage);}}","map":{"version":3,"names":["logger","extractErrorMessage","error","defaultMessage","arguments","length","undefined","apiError","message","response","data","errors","firstErrorKey","Object","keys","status","statusText","handleApiError","success","safeApiCall","apiCall","defaultErrorMessage","result"],"sources":["/var/www/College-IUP/front/src/utils/errorHandler.js"],"sourcesContent":["/**\n * Utilitaire pour gérer les erreurs API de manière cohérente\n */\n\nimport logger from './logger';\n\n/**\n * Extrait le message d'erreur le plus approprié d'une réponse d'erreur\n * @param {Error|Object} error - L'erreur capturée\n * @param {string} defaultMessage - Message par défaut si aucun message spécifique n'est trouvé\n * @returns {string} Le message d'erreur à afficher à l'utilisateur\n */\nexport function extractErrorMessage(error, defaultMessage = 'Une erreur est survenue') {\n    logger.apiError(error, 'extractErrorMessage');\n    \n    // Si l'erreur a un message direct\n    if (error.message) {\n        return error.message;\n    }\n    \n    // Si l'erreur provient d'une réponse HTTP avec des données\n    if (error.response && error.response.data) {\n        const data = error.response.data;\n        \n        // Message principal\n        if (data.message) {\n            return data.message;\n        }\n        \n        // Erreurs de validation Laravel\n        if (data.errors) {\n            const firstErrorKey = Object.keys(data.errors)[0];\n            if (firstErrorKey && data.errors[firstErrorKey][0]) {\n                return data.errors[firstErrorKey][0];\n            }\n        }\n        \n        // Erreur générique\n        if (data.error) {\n            return data.error;\n        }\n    }\n    \n    // Si c'est un objet d'erreur fetch/axios\n    if (error.status || error.statusText) {\n        return `Erreur ${error.status || ''}: ${error.statusText || 'Erreur de réseau'}`;\n    }\n    \n    return defaultMessage;\n}\n\n/**\n * Gère une erreur API et retourne un objet avec le statut et le message\n * @param {Error|Object} error - L'erreur capturée\n * @param {string} defaultMessage - Message par défaut\n * @returns {Object} { success: false, message: string }\n */\nexport function handleApiError(error, defaultMessage = 'Une erreur est survenue') {\n    const message = extractErrorMessage(error, defaultMessage);\n    return {\n        success: false,\n        message: message\n    };\n}\n\n/**\n * Wrapper pour les appels API qui gère automatiquement les erreurs\n * @param {Function} apiCall - La fonction d'appel API\n * @param {string} defaultErrorMessage - Message d'erreur par défaut\n * @returns {Promise} Résultat de l'appel API ou erreur formatée\n */\nexport async function safeApiCall(apiCall, defaultErrorMessage = 'Une erreur est survenue') {\n    try {\n        const result = await apiCall();\n        return result;\n    } catch (error) {\n        return handleApiError(error, defaultErrorMessage);\n    }\n}"],"mappings":"AAAA;AACA;AACA,GAEA,MAAO,CAAAA,MAAM,KAAM,UAAU,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,mBAAmBA,CAACC,KAAK,CAA8C,IAA5C,CAAAC,cAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,yBAAyB,CACjFJ,MAAM,CAACO,QAAQ,CAACL,KAAK,CAAE,qBAAqB,CAAC,CAE7C;AACA,GAAIA,KAAK,CAACM,OAAO,CAAE,CACf,MAAO,CAAAN,KAAK,CAACM,OAAO,CACxB,CAEA;AACA,GAAIN,KAAK,CAACO,QAAQ,EAAIP,KAAK,CAACO,QAAQ,CAACC,IAAI,CAAE,CACvC,KAAM,CAAAA,IAAI,CAAGR,KAAK,CAACO,QAAQ,CAACC,IAAI,CAEhC;AACA,GAAIA,IAAI,CAACF,OAAO,CAAE,CACd,MAAO,CAAAE,IAAI,CAACF,OAAO,CACvB,CAEA;AACA,GAAIE,IAAI,CAACC,MAAM,CAAE,CACb,KAAM,CAAAC,aAAa,CAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,CACjD,GAAIC,aAAa,EAAIF,IAAI,CAACC,MAAM,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAE,CAChD,MAAO,CAAAF,IAAI,CAACC,MAAM,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC,CACxC,CACJ,CAEA;AACA,GAAIF,IAAI,CAACR,KAAK,CAAE,CACZ,MAAO,CAAAQ,IAAI,CAACR,KAAK,CACrB,CACJ,CAEA;AACA,GAAIA,KAAK,CAACa,MAAM,EAAIb,KAAK,CAACc,UAAU,CAAE,CAClC,MAAO,UAAUd,KAAK,CAACa,MAAM,EAAI,EAAE,KAAKb,KAAK,CAACc,UAAU,EAAI,kBAAkB,EAAE,CACpF,CAEA,MAAO,CAAAb,cAAc,CACzB,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAc,cAAcA,CAACf,KAAK,CAA8C,IAA5C,CAAAC,cAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,yBAAyB,CAC5E,KAAM,CAAAI,OAAO,CAAGP,mBAAmB,CAACC,KAAK,CAAEC,cAAc,CAAC,CAC1D,MAAO,CACHe,OAAO,CAAE,KAAK,CACdV,OAAO,CAAEA,OACb,CAAC,CACL,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAW,WAAWA,CAACC,OAAO,CAAmD,IAAjD,CAAAC,mBAAmB,CAAAjB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,yBAAyB,CACtF,GAAI,CACA,KAAM,CAAAkB,MAAM,CAAG,KAAM,CAAAF,OAAO,CAAC,CAAC,CAC9B,MAAO,CAAAE,MAAM,CACjB,CAAE,MAAOpB,KAAK,CAAE,CACZ,MAAO,CAAAe,cAAc,CAACf,KAAK,CAAEmB,mBAAmB,CAAC,CACrD,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}