{"ast":null,"code":"import{useState,useCallback}from'react';import{paramsTraductions}from'../local/params';import{getLang}from'../utils/lang';/**\n * Hook personnalisé pour la validation et le formatage des numéros de téléphone\n * Optimisé pour les numéros camerounais (+237)\n */export const usePhoneValidation=()=>{const[phoneError,setPhoneError]=useState('');/**\n     * Valide un numéro de téléphone\n     * @param {string} phone - Le numéro à valider\n     * @returns {object} - { isValid: boolean, message: string }\n     */const validatePhone=useCallback(phone=>{if(!phone||phone.trim()===''){setPhoneError('');return{isValid:true,message:''};}// Remove all non-digit characters except +\nconst cleanPhone=phone.replace(/[^+\\d]/g,'');// Check basic format\nconst phoneRegex=/^(\\+)?[1-9]\\d{7,14}$/;const isValid=phoneRegex.test(cleanPhone);if(!isValid){const message=paramsTraductions[getLang()].invalidPhoneFormat||'Format de téléphone invalide. Utilisez 8-15 chiffres avec ou sans indicatif (+237...)';setPhoneError(message);return{isValid:false,message};}// Additional validation for Cameroon numbers\nif(cleanPhone.startsWith('+237')||cleanPhone.startsWith('237')){const number=cleanPhone.replace(/^\\+?237/,'');if(number.length!==9||!number.startsWith('6')){const message=paramsTraductions[getLang()].invalidCameroonPhone||'Numéro camerounais invalide. Format attendu: +237 6XX XXX XXX';setPhoneError(message);return{isValid:false,message};}}setPhoneError('');return{isValid:true,message:''};},[]);/**\n     * Formate un numéro de téléphone pour l'affichage\n     * @param {string} phone - Le numéro à formater\n     * @returns {string} - Le numéro formaté\n     */const formatPhone=useCallback(phone=>{if(!phone)return'';// Remove all non-digit characters except +\nlet cleanPhone=phone.replace(/[^+\\d]/g,'');// Format for Cameroon numbers (+237 6XX XXX XXX)\nif(cleanPhone.startsWith('+237')){const number=cleanPhone.substring(4);if(number.length>=9){return`+237 ${number.substring(0,1)}${number.substring(1,3)} ${number.substring(3,6)} ${number.substring(6,9)}`;}return cleanPhone;}else if(cleanPhone.startsWith('237')){const number=cleanPhone.substring(3);if(number.length>=9){return`+237 ${number.substring(0,1)}${number.substring(1,3)} ${number.substring(3,6)} ${number.substring(6,9)}`;}return`+${cleanPhone}`;}else if(cleanPhone.length===9&&cleanPhone.startsWith('6')){// Assume it's a Cameroon number without country code\nreturn`+237 ${cleanPhone.substring(0,1)}${cleanPhone.substring(1,3)} ${cleanPhone.substring(3,6)} ${cleanPhone.substring(6,9)}`;}// For other international numbers, add + if missing\nif(cleanPhone.length>=8&&!cleanPhone.startsWith('+')){return`+${cleanPhone}`;}return cleanPhone;},[]);/**\n     * Nettoie un numéro de téléphone pour le stockage\n     * @param {string} phone - Le numéro à nettoyer\n     * @returns {string} - Le numéro nettoyé\n     */const cleanPhone=useCallback(phone=>{if(!phone)return'';// Keep only digits and +\nlet cleaned=phone.replace(/[^+\\d]/g,'');// Ensure + is only at the beginning\nif(cleaned.includes('+')){const parts=cleaned.split('+');cleaned='+'+parts.join('');}return cleaned;},[]);/**\n     * Détecte le pays d'un numéro de téléphone\n     * @param {string} phone - Le numéro à analyser\n     * @returns {object} - { country: string, flag: string, code: string }\n     */const detectCountry=useCallback(phone=>{if(!phone)return{country:'Unknown',flag:'🌍',code:''};const cleanPhone=phone.replace(/[^+\\d]/g,'');if(cleanPhone.startsWith('+237')||cleanPhone.startsWith('237')){return{country:'Cameroun',flag:'🇨🇲',code:'+237'};}else if(cleanPhone.startsWith('+33')||cleanPhone.startsWith('33')){return{country:'France',flag:'🇫🇷',code:'+33'};}else if(cleanPhone.startsWith('+1')){return{country:'USA/Canada',flag:'🇺🇸',code:'+1'};}else if(cleanPhone.startsWith('+234')){return{country:'Nigeria',flag:'🇳🇬',code:'+234'};}return{country:'International',flag:'🌍',code:'+'};},[]);/**\n     * Suggestions de correction pour les numéros mal formatés\n     * @param {string} phone - Le numéro mal formaté\n     * @returns {array} - Liste de suggestions\n     */const getSuggestions=useCallback(phone=>{if(!phone)return[];const suggestions=[];const cleanPhone=phone.replace(/[^\\d]/g,'');// Si c'est 9 chiffres commençant par 6, suggérer +237\nif(cleanPhone.length===9&&cleanPhone.startsWith('6')){suggestions.push({formatted:`+237 ${cleanPhone.substring(0,1)}${cleanPhone.substring(1,3)} ${cleanPhone.substring(3,6)} ${cleanPhone.substring(6,9)}`,description:'Numéro camerounais avec indicatif'});}// Si c'est 12 chiffres commençant par 237\nif(cleanPhone.length===12&&cleanPhone.startsWith('237')){const number=cleanPhone.substring(3);suggestions.push({formatted:`+237 ${number.substring(0,1)}${number.substring(1,3)} ${number.substring(3,6)} ${number.substring(6,9)}`,description:'Numéro camerounais formaté'});}return suggestions;},[]);return{validatePhone,formatPhone,cleanPhone,detectCountry,getSuggestions,phoneError,setPhoneError};};","map":{"version":3,"names":["useState","useCallback","paramsTraductions","getLang","usePhoneValidation","phoneError","setPhoneError","validatePhone","phone","trim","isValid","message","cleanPhone","replace","phoneRegex","test","invalidPhoneFormat","startsWith","number","length","invalidCameroonPhone","formatPhone","substring","cleaned","includes","parts","split","join","detectCountry","country","flag","code","getSuggestions","suggestions","push","formatted","description"],"sources":["/var/www/College-IUP/front/src/hooks/usePhoneValidation.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { paramsTraductions } from '../local/params';\nimport { getLang } from '../utils/lang';\n\n/**\n * Hook personnalisé pour la validation et le formatage des numéros de téléphone\n * Optimisé pour les numéros camerounais (+237)\n */\nexport const usePhoneValidation = () => {\n    const [phoneError, setPhoneError] = useState('');\n\n    /**\n     * Valide un numéro de téléphone\n     * @param {string} phone - Le numéro à valider\n     * @returns {object} - { isValid: boolean, message: string }\n     */\n    const validatePhone = useCallback((phone) => {\n        if (!phone || phone.trim() === '') {\n            setPhoneError('');\n            return { isValid: true, message: '' };\n        }\n        \n        // Remove all non-digit characters except +\n        const cleanPhone = phone.replace(/[^+\\d]/g, '');\n        \n        // Check basic format\n        const phoneRegex = /^(\\+)?[1-9]\\d{7,14}$/;\n        const isValid = phoneRegex.test(cleanPhone);\n        \n        if (!isValid) {\n            const message = paramsTraductions[getLang()].invalidPhoneFormat || \n                           'Format de téléphone invalide. Utilisez 8-15 chiffres avec ou sans indicatif (+237...)';\n            setPhoneError(message);\n            return { isValid: false, message };\n        }\n        \n        // Additional validation for Cameroon numbers\n        if (cleanPhone.startsWith('+237') || cleanPhone.startsWith('237')) {\n            const number = cleanPhone.replace(/^\\+?237/, '');\n            if (number.length !== 9 || !number.startsWith('6')) {\n                const message = paramsTraductions[getLang()].invalidCameroonPhone || \n                               'Numéro camerounais invalide. Format attendu: +237 6XX XXX XXX';\n                setPhoneError(message);\n                return { isValid: false, message };\n            }\n        }\n        \n        setPhoneError('');\n        return { isValid: true, message: '' };\n    }, []);\n\n    /**\n     * Formate un numéro de téléphone pour l'affichage\n     * @param {string} phone - Le numéro à formater\n     * @returns {string} - Le numéro formaté\n     */\n    const formatPhone = useCallback((phone) => {\n        if (!phone) return '';\n        \n        // Remove all non-digit characters except +\n        let cleanPhone = phone.replace(/[^+\\d]/g, '');\n        \n        // Format for Cameroon numbers (+237 6XX XXX XXX)\n        if (cleanPhone.startsWith('+237')) {\n            const number = cleanPhone.substring(4);\n            if (number.length >= 9) {\n                return `+237 ${number.substring(0, 1)}${number.substring(1, 3)} ${number.substring(3, 6)} ${number.substring(6, 9)}`;\n            }\n            return cleanPhone;\n        } else if (cleanPhone.startsWith('237')) {\n            const number = cleanPhone.substring(3);\n            if (number.length >= 9) {\n                return `+237 ${number.substring(0, 1)}${number.substring(1, 3)} ${number.substring(3, 6)} ${number.substring(6, 9)}`;\n            }\n            return `+${cleanPhone}`;\n        } else if (cleanPhone.length === 9 && cleanPhone.startsWith('6')) {\n            // Assume it's a Cameroon number without country code\n            return `+237 ${cleanPhone.substring(0, 1)}${cleanPhone.substring(1, 3)} ${cleanPhone.substring(3, 6)} ${cleanPhone.substring(6, 9)}`;\n        }\n        \n        // For other international numbers, add + if missing\n        if (cleanPhone.length >= 8 && !cleanPhone.startsWith('+')) {\n            return `+${cleanPhone}`;\n        }\n        \n        return cleanPhone;\n    }, []);\n\n    /**\n     * Nettoie un numéro de téléphone pour le stockage\n     * @param {string} phone - Le numéro à nettoyer\n     * @returns {string} - Le numéro nettoyé\n     */\n    const cleanPhone = useCallback((phone) => {\n        if (!phone) return '';\n        \n        // Keep only digits and +\n        let cleaned = phone.replace(/[^+\\d]/g, '');\n        \n        // Ensure + is only at the beginning\n        if (cleaned.includes('+')) {\n            const parts = cleaned.split('+');\n            cleaned = '+' + parts.join('');\n        }\n        \n        return cleaned;\n    }, []);\n\n    /**\n     * Détecte le pays d'un numéro de téléphone\n     * @param {string} phone - Le numéro à analyser\n     * @returns {object} - { country: string, flag: string, code: string }\n     */\n    const detectCountry = useCallback((phone) => {\n        if (!phone) return { country: 'Unknown', flag: '🌍', code: '' };\n        \n        const cleanPhone = phone.replace(/[^+\\d]/g, '');\n        \n        if (cleanPhone.startsWith('+237') || cleanPhone.startsWith('237')) {\n            return { country: 'Cameroun', flag: '🇨🇲', code: '+237' };\n        } else if (cleanPhone.startsWith('+33') || cleanPhone.startsWith('33')) {\n            return { country: 'France', flag: '🇫🇷', code: '+33' };\n        } else if (cleanPhone.startsWith('+1')) {\n            return { country: 'USA/Canada', flag: '🇺🇸', code: '+1' };\n        } else if (cleanPhone.startsWith('+234')) {\n            return { country: 'Nigeria', flag: '🇳🇬', code: '+234' };\n        }\n        \n        return { country: 'International', flag: '🌍', code: '+' };\n    }, []);\n\n    /**\n     * Suggestions de correction pour les numéros mal formatés\n     * @param {string} phone - Le numéro mal formaté\n     * @returns {array} - Liste de suggestions\n     */\n    const getSuggestions = useCallback((phone) => {\n        if (!phone) return [];\n        \n        const suggestions = [];\n        const cleanPhone = phone.replace(/[^\\d]/g, '');\n        \n        // Si c'est 9 chiffres commençant par 6, suggérer +237\n        if (cleanPhone.length === 9 && cleanPhone.startsWith('6')) {\n            suggestions.push({\n                formatted: `+237 ${cleanPhone.substring(0, 1)}${cleanPhone.substring(1, 3)} ${cleanPhone.substring(3, 6)} ${cleanPhone.substring(6, 9)}`,\n                description: 'Numéro camerounais avec indicatif'\n            });\n        }\n        \n        // Si c'est 12 chiffres commençant par 237\n        if (cleanPhone.length === 12 && cleanPhone.startsWith('237')) {\n            const number = cleanPhone.substring(3);\n            suggestions.push({\n                formatted: `+237 ${number.substring(0, 1)}${number.substring(1, 3)} ${number.substring(3, 6)} ${number.substring(6, 9)}`,\n                description: 'Numéro camerounais formaté'\n            });\n        }\n        \n        return suggestions;\n    }, []);\n\n    return {\n        validatePhone,\n        formatPhone,\n        cleanPhone,\n        detectCountry,\n        getSuggestions,\n        phoneError,\n        setPhoneError\n    };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}